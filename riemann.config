; -*- mode: clojure; -*-
; vim: filetype=clojure

;(logging/init :file "/var/log/riemann/riemann.log")
(ns riemann.config)

(require 'riemann-enhancements.core)
(require 'riemann-enhancements.server)

(def temp-dashboard
  {:scheme ["#0000ff"
            "#000000"
            "#ff0000"
            "#0000ff"
            "#00ff00"
            "#000000"
            "#0000ff"
            "#00ff00"
            "#ff0000"]
   :dashboards [{:name "Demo"
                 :refresh 2500
                 :description "This is just a sample. Try feeding riemann-healh information into riemann for \"localhost\"!"
                 :metrics [{:alias "cpu"
                            :target "localhost:cpu"
                            :description "cpu usage"
                            :summary "avg"
                            :renderer "line"
                            :interpolation "linear"}]}]})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server :host host)
  (udp-server :host host)
  (repl-server :host host :port 12345)
  (service! (riemann-enhancements.server/ring-server
              (riemann-enhancements.core/graphite-api
                temp-dashboard
                "datomic:free://localhost:4334/metrics")))
  (ws-server :host host))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (update-index (index)))]

  ; Inbound events will be passed to these streams:
  (streams

    ; Index all events immediately.
    index

    (riemann-enhancements.core/log-to-datomic
      :uri "datomic:free://localhost:4334/metrics")

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))
))
